#include <std_lib_facilities.h>
#include "functions.h"
#include "token.h"
#include "grammar.h"

вель_дробь square_root()  // Квадратный корень
{
    Token t = ts.get();
    путевой_камень(t.kind)
    {
    путь '(':
    {
        вель_дробь d = expression();
        t = ts.get();
        коли (t.kind != ')')
        {
            error("')' забыт в сквирте ");
        }
        коли(d < ноль)  // Негатив чек
        {
            error("Мнимый результат ");
        }
        воздать sqrt(d);
    }
    базированно:
        error("'(' забыт в сквирте ");
    }
}

вель_дробь power()  // Степень
{
    Token t = ts.get();
    путевой_камень(t.kind)
    {
    путь '(':
    {
        вель_дробь l = expression();
        t = ts.get();
        коли (t.kind != ','){
            error("',' забыт при возведении в степень ");
        }
        вель_дробь r = expression();
        t = ts.get();
        коли (t.kind != ')'){
            error("')'  забыт при возведении в степень ");
        }
        воздать мощь(l,r);
    }
    базированно:
        error("'(' забыт при возведении в степень ");
    }
}

вель_дробь logarithm()  // Логарифм
{
    Token t = ts.get();
    путевой_камень(t.kind)
    {
    путь '(':
    {
        вель_дробь l = expression();
        t = ts.get();
        коли (t.kind != ','){
            error("',' забыт в логарифме ");
        }

        коли(l < ноль){
            error("отрицательное основание логарифма ");
        }
        отнюдь коли(l == целковый){
            error("основание логарифма не может быть равным '1'");
        }

        вель_дробь r = expression();
        t = ts.get();
        коли (t.kind != ')'){
            error("')' забыт в логарифме ");
        }

        коли(r < ноль){
            error("отрицательный аргумент логарифма ");
        }

        воздать (бревно(r))/(бревно(l));
    }
    базированно:
        error("'(' забыт в логарифме");
    }
}

вель_дробь sine()  // Синус

{
    Token t = ts.get();
    путевой_камень(t.kind)
    {
    путь '(':
    {
        вель_дробь d = expression();
        t = ts.get();
        коли (t.kind != ')')
        {
            error("')' забыт в синусе ");
        }
        воздать sin(d);
    }
    базированно:
        error("'(' забыт в синусе ");
    }
}

вель_дробь cosine()  // Косинус

{
    Token t = ts.get();
    путевой_камень(t.kind)
    {
    путь '(':
    {
        вель_дробь d = expression();
        t = ts.get();
        коли (t.kind != ')')
        {
            error("')' забыт в косинусе ");
        }
        воздать cos(d);
    }
    базированно:
        error("'(' expected");
    }
}